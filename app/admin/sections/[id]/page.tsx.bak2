// @ts-nocheck
"use client";
import React from "react";

async function fetchJSON(url: string) {
  const isServer = typeof window === "undefined";
  const base = isServer ? process.env.NEXT_PUBLIC_BASE_URL || "http://localhost:3000" : "";
  const res = await fetch(isServer ? base + url : url, { cache: "no-store" });
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return res.json();
}

function SectionClient({ initial, sectionId }: { initial: any; sectionId: string }) {
  "use client";
  const [q, setQ] = React.useState("");
  const [showAnswers, setShowAnswers] = React.useState(true);

  const items = Array.isArray(initial?.items) ? initial.items as any[] : [];
  const filtered = items.filter((it) => {
    if (!q.trim()) return true;
    const hay = `${it.id} ${it.question} ${it.options?.join(" ")} ${it.explanation||""} ${it.references?.join(" ")||""}`.toLowerCase();
    return hay.includes(q.toLowerCase());
  });

  return (
    <div className="max-w-6xl mx-auto p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Section: {sectionId}</h1>
        <a href="/admin/dashboard" className="text-sm underline">← Back to Admin</a>
      </div>

      <div className="bg-white dark:bg-zinc-900 dark:border-zinc-700 border rounded-xl p-4 flex flex-wrap items-center gap-3">
        <input
          className="border rounded px-3 py-2 flex-1 min-w-[220px] dark:bg-zinc-900 dark:border-zinc-700"
          placeholder="Search in questions/options…"
          value={q}
          onChange={(e)=>setQ(e.target.value)}
        />
        <label className="text-sm flex items-center gap-2">
          <input type="checkbox" checked={showAnswers} onChange={e=>setShowAnswers(e.target.checked)} />
          Show answers
        </label>
        <div className="text-sm text-gray-600 dark:text-zinc-300 ml-auto">
          {filtered.length}/{items.length} shown
        </div>
      </div>

      <ul className="space-y-4">
        {filtered.map((it) => (
          <li key={it.id} className="border rounded-xl p-4 bg-white dark:bg-zinc-900 dark:border-zinc-700">
            <div className="text-xs text-gray-500">ID: {it.id} • Section tag: {it.section}</div>
            <div className="font-medium mt-1">{it.question}</div>
            <ol className="list-decimal ml-6 mt-2 space-y-1">
              {it.options?.map((opt: string, idx: number) => {
                const isCorrect = showAnswers && Array.isArray(it.answer) && it.answer[0] === idx;
                return (
                  <li key={idx} className={isCorrect ? "font-semibold" : ""}>
                    {opt}
                    {isCorrect ? <span className="ml-2 text-green-700">✓</span> : null}
                  </li>
                );
              })}
            </ol>
            {it.explanation && (
              <div className="mt-2 text-sm text-gray-700 dark:text-zinc-300">{it.explanation}</div>
            )}
            {it.references?.length ? (
              <div className="text-xs text-gray-500 mt-1">Refs: {it.references.join(", ")}</div>
            ) : null}
          </li>
        ))}
      </ul>

      {filtered.length === 0 && (
        <p className="text-gray-600">No questions match your filter.</p>
      )}
    </div>
  );
}

export default async function SectionPage({ params }: { params: { id: string } }) {
  const { id } = params;
  const data = await fetchJSON(`/api/admin/sections/${id}`);
  return <SectionClient initial={data} sectionId={id} />;
}
